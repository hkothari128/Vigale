// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(dbgenerated("(uuid_generate_v4())::text")) @map("_id") @db.Text
  name           String
  image          String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[]
  accounts       Account[]
  favoriteIds    String[]  @db.Uuid
}

model Account {
  id                String  @id @default(dbgenerated("(uuid_generate_v4())::text")) @map("_id") @db.Text
  userId            String  @db.Text
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("(uuid_generate_v4())::text")) @map("_id") @db.Text
  sessionToken String   @unique
  userId       String   @db.Text
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(dbgenerated("(uuid_generate_v4())::text")) @map("_id") @db.Text
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model Movie {
//   id           String   @id @default(dbgenerated("(uuid_generate_v4())::text")) @map("_id") @db.Text
//   title        String
//   description  String
//   videoUrl     String
//   thumbnailUrl String
//   genre        String
//   duration     String
//   date         DateTime @default(now())
// }
model Tag {
  id     String  @id
  text   String
  videos Video[]
}

model Video {
  id           String   @id @default(dbgenerated("(uuid_generate_v4())::text")) @map("_id") @db.Text
  userId       String   @db.Text
  title        String
  description  String
  url          String
  preview_url  String
  thumbnailUrl String
  upload_date  DateTime @default(now())
  tags         Tag[]
  owner         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
